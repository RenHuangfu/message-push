// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"message-push/app/receiver/common/model/po/ent/businessclient"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessClientCreate is the builder for creating a BusinessClient entity.
type BusinessClientCreate struct {
	config
	mutation *BusinessClientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (bcc *BusinessClientCreate) SetName(s string) *BusinessClientCreate {
	bcc.mutation.SetName(s)
	return bcc
}

// SetClientKey sets the "client_key" field.
func (bcc *BusinessClientCreate) SetClientKey(s string) *BusinessClientCreate {
	bcc.mutation.SetClientKey(s)
	return bcc
}

// SetAppID sets the "app_id" field.
func (bcc *BusinessClientCreate) SetAppID(s string) *BusinessClientCreate {
	bcc.mutation.SetAppID(s)
	return bcc
}

// SetClientID sets the "client_id" field.
func (bcc *BusinessClientCreate) SetClientID(s string) *BusinessClientCreate {
	bcc.mutation.SetClientID(s)
	return bcc
}

// SetClientType sets the "client_type" field.
func (bcc *BusinessClientCreate) SetClientType(s string) *BusinessClientCreate {
	bcc.mutation.SetClientType(s)
	return bcc
}

// SetIsDel sets the "is_del" field.
func (bcc *BusinessClientCreate) SetIsDel(i int) *BusinessClientCreate {
	bcc.mutation.SetIsDel(i)
	return bcc
}

// SetCreateTime sets the "create_time" field.
func (bcc *BusinessClientCreate) SetCreateTime(t time.Time) *BusinessClientCreate {
	bcc.mutation.SetCreateTime(t)
	return bcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bcc *BusinessClientCreate) SetNillableCreateTime(t *time.Time) *BusinessClientCreate {
	if t != nil {
		bcc.SetCreateTime(*t)
	}
	return bcc
}

// SetUpdateTime sets the "update_time" field.
func (bcc *BusinessClientCreate) SetUpdateTime(t time.Time) *BusinessClientCreate {
	bcc.mutation.SetUpdateTime(t)
	return bcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bcc *BusinessClientCreate) SetNillableUpdateTime(t *time.Time) *BusinessClientCreate {
	if t != nil {
		bcc.SetUpdateTime(*t)
	}
	return bcc
}

// SetID sets the "id" field.
func (bcc *BusinessClientCreate) SetID(i int) *BusinessClientCreate {
	bcc.mutation.SetID(i)
	return bcc
}

// Mutation returns the BusinessClientMutation object of the builder.
func (bcc *BusinessClientCreate) Mutation() *BusinessClientMutation {
	return bcc.mutation
}

// Save creates the BusinessClient in the database.
func (bcc *BusinessClientCreate) Save(ctx context.Context) (*BusinessClient, error) {
	bcc.defaults()
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BusinessClientCreate) SaveX(ctx context.Context) *BusinessClient {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BusinessClientCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BusinessClientCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BusinessClientCreate) defaults() {
	if _, ok := bcc.mutation.CreateTime(); !ok {
		v := businessclient.DefaultCreateTime()
		bcc.mutation.SetCreateTime(v)
	}
	if _, ok := bcc.mutation.UpdateTime(); !ok {
		v := businessclient.DefaultUpdateTime()
		bcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BusinessClientCreate) check() error {
	if _, ok := bcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BusinessClient.name"`)}
	}
	if v, ok := bcc.mutation.Name(); ok {
		if err := businessclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessClient.name": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.ClientKey(); !ok {
		return &ValidationError{Name: "client_key", err: errors.New(`ent: missing required field "BusinessClient.client_key"`)}
	}
	if v, ok := bcc.mutation.ClientKey(); ok {
		if err := businessclient.ClientKeyValidator(v); err != nil {
			return &ValidationError{Name: "client_key", err: fmt.Errorf(`ent: validator failed for field "BusinessClient.client_key": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "BusinessClient.app_id"`)}
	}
	if v, ok := bcc.mutation.AppID(); ok {
		if err := businessclient.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`ent: validator failed for field "BusinessClient.app_id": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "BusinessClient.client_id"`)}
	}
	if v, ok := bcc.mutation.ClientID(); ok {
		if err := businessclient.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "BusinessClient.client_id": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.ClientType(); !ok {
		return &ValidationError{Name: "client_type", err: errors.New(`ent: missing required field "BusinessClient.client_type"`)}
	}
	if v, ok := bcc.mutation.ClientType(); ok {
		if err := businessclient.ClientTypeValidator(v); err != nil {
			return &ValidationError{Name: "client_type", err: fmt.Errorf(`ent: validator failed for field "BusinessClient.client_type": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "BusinessClient.is_del"`)}
	}
	if _, ok := bcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BusinessClient.create_time"`)}
	}
	if _, ok := bcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BusinessClient.update_time"`)}
	}
	return nil
}

func (bcc *BusinessClientCreate) sqlSave(ctx context.Context) (*BusinessClient, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BusinessClientCreate) createSpec() (*BusinessClient, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessClient{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(businessclient.Table, sqlgraph.NewFieldSpec(businessclient.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bcc.conflict
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bcc.mutation.Name(); ok {
		_spec.SetField(businessclient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bcc.mutation.ClientKey(); ok {
		_spec.SetField(businessclient.FieldClientKey, field.TypeString, value)
		_node.ClientKey = value
	}
	if value, ok := bcc.mutation.AppID(); ok {
		_spec.SetField(businessclient.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := bcc.mutation.ClientID(); ok {
		_spec.SetField(businessclient.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := bcc.mutation.ClientType(); ok {
		_spec.SetField(businessclient.FieldClientType, field.TypeString, value)
		_node.ClientType = value
	}
	if value, ok := bcc.mutation.IsDel(); ok {
		_spec.SetField(businessclient.FieldIsDel, field.TypeInt, value)
		_node.IsDel = value
	}
	if value, ok := bcc.mutation.CreateTime(); ok {
		_spec.SetField(businessclient.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bcc.mutation.UpdateTime(); ok {
		_spec.SetField(businessclient.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BusinessClient.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessClientUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (bcc *BusinessClientCreate) OnConflict(opts ...sql.ConflictOption) *BusinessClientUpsertOne {
	bcc.conflict = opts
	return &BusinessClientUpsertOne{
		create: bcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BusinessClient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcc *BusinessClientCreate) OnConflictColumns(columns ...string) *BusinessClientUpsertOne {
	bcc.conflict = append(bcc.conflict, sql.ConflictColumns(columns...))
	return &BusinessClientUpsertOne{
		create: bcc,
	}
}

type (
	// BusinessClientUpsertOne is the builder for "upsert"-ing
	//  one BusinessClient node.
	BusinessClientUpsertOne struct {
		create *BusinessClientCreate
	}

	// BusinessClientUpsert is the "OnConflict" setter.
	BusinessClientUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *BusinessClientUpsert) SetName(v string) *BusinessClientUpsert {
	u.Set(businessclient.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateName() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldName)
	return u
}

// SetClientKey sets the "client_key" field.
func (u *BusinessClientUpsert) SetClientKey(v string) *BusinessClientUpsert {
	u.Set(businessclient.FieldClientKey, v)
	return u
}

// UpdateClientKey sets the "client_key" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateClientKey() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldClientKey)
	return u
}

// SetAppID sets the "app_id" field.
func (u *BusinessClientUpsert) SetAppID(v string) *BusinessClientUpsert {
	u.Set(businessclient.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateAppID() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldAppID)
	return u
}

// SetClientID sets the "client_id" field.
func (u *BusinessClientUpsert) SetClientID(v string) *BusinessClientUpsert {
	u.Set(businessclient.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateClientID() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldClientID)
	return u
}

// SetClientType sets the "client_type" field.
func (u *BusinessClientUpsert) SetClientType(v string) *BusinessClientUpsert {
	u.Set(businessclient.FieldClientType, v)
	return u
}

// UpdateClientType sets the "client_type" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateClientType() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldClientType)
	return u
}

// SetIsDel sets the "is_del" field.
func (u *BusinessClientUpsert) SetIsDel(v int) *BusinessClientUpsert {
	u.Set(businessclient.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateIsDel() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldIsDel)
	return u
}

// AddIsDel adds v to the "is_del" field.
func (u *BusinessClientUpsert) AddIsDel(v int) *BusinessClientUpsert {
	u.Add(businessclient.FieldIsDel, v)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BusinessClientUpsert) SetUpdateTime(v time.Time) *BusinessClientUpsert {
	u.Set(businessclient.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BusinessClientUpsert) UpdateUpdateTime() *BusinessClientUpsert {
	u.SetExcluded(businessclient.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BusinessClient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(businessclient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BusinessClientUpsertOne) UpdateNewValues() *BusinessClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(businessclient.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(businessclient.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BusinessClient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BusinessClientUpsertOne) Ignore() *BusinessClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessClientUpsertOne) DoNothing() *BusinessClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessClientCreate.OnConflict
// documentation for more info.
func (u *BusinessClientUpsertOne) Update(set func(*BusinessClientUpsert)) *BusinessClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessClientUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BusinessClientUpsertOne) SetName(v string) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateName() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateName()
	})
}

// SetClientKey sets the "client_key" field.
func (u *BusinessClientUpsertOne) SetClientKey(v string) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetClientKey(v)
	})
}

// UpdateClientKey sets the "client_key" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateClientKey() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateClientKey()
	})
}

// SetAppID sets the "app_id" field.
func (u *BusinessClientUpsertOne) SetAppID(v string) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateAppID() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateAppID()
	})
}

// SetClientID sets the "client_id" field.
func (u *BusinessClientUpsertOne) SetClientID(v string) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateClientID() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateClientID()
	})
}

// SetClientType sets the "client_type" field.
func (u *BusinessClientUpsertOne) SetClientType(v string) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetClientType(v)
	})
}

// UpdateClientType sets the "client_type" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateClientType() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateClientType()
	})
}

// SetIsDel sets the "is_del" field.
func (u *BusinessClientUpsertOne) SetIsDel(v int) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetIsDel(v)
	})
}

// AddIsDel adds v to the "is_del" field.
func (u *BusinessClientUpsertOne) AddIsDel(v int) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.AddIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateIsDel() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateIsDel()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *BusinessClientUpsertOne) SetUpdateTime(v time.Time) *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BusinessClientUpsertOne) UpdateUpdateTime() *BusinessClientUpsertOne {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *BusinessClientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessClientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessClientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BusinessClientUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BusinessClientUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BusinessClientCreateBulk is the builder for creating many BusinessClient entities in bulk.
type BusinessClientCreateBulk struct {
	config
	err      error
	builders []*BusinessClientCreate
	conflict []sql.ConflictOption
}

// Save creates the BusinessClient entities in the database.
func (bccb *BusinessClientCreateBulk) Save(ctx context.Context) ([]*BusinessClient, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BusinessClient, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BusinessClientCreateBulk) SaveX(ctx context.Context) []*BusinessClient {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BusinessClientCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BusinessClientCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BusinessClient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessClientUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (bccb *BusinessClientCreateBulk) OnConflict(opts ...sql.ConflictOption) *BusinessClientUpsertBulk {
	bccb.conflict = opts
	return &BusinessClientUpsertBulk{
		create: bccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BusinessClient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bccb *BusinessClientCreateBulk) OnConflictColumns(columns ...string) *BusinessClientUpsertBulk {
	bccb.conflict = append(bccb.conflict, sql.ConflictColumns(columns...))
	return &BusinessClientUpsertBulk{
		create: bccb,
	}
}

// BusinessClientUpsertBulk is the builder for "upsert"-ing
// a bulk of BusinessClient nodes.
type BusinessClientUpsertBulk struct {
	create *BusinessClientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BusinessClient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(businessclient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BusinessClientUpsertBulk) UpdateNewValues() *BusinessClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(businessclient.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(businessclient.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BusinessClient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BusinessClientUpsertBulk) Ignore() *BusinessClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessClientUpsertBulk) DoNothing() *BusinessClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessClientCreateBulk.OnConflict
// documentation for more info.
func (u *BusinessClientUpsertBulk) Update(set func(*BusinessClientUpsert)) *BusinessClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessClientUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BusinessClientUpsertBulk) SetName(v string) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateName() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateName()
	})
}

// SetClientKey sets the "client_key" field.
func (u *BusinessClientUpsertBulk) SetClientKey(v string) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetClientKey(v)
	})
}

// UpdateClientKey sets the "client_key" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateClientKey() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateClientKey()
	})
}

// SetAppID sets the "app_id" field.
func (u *BusinessClientUpsertBulk) SetAppID(v string) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateAppID() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateAppID()
	})
}

// SetClientID sets the "client_id" field.
func (u *BusinessClientUpsertBulk) SetClientID(v string) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateClientID() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateClientID()
	})
}

// SetClientType sets the "client_type" field.
func (u *BusinessClientUpsertBulk) SetClientType(v string) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetClientType(v)
	})
}

// UpdateClientType sets the "client_type" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateClientType() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateClientType()
	})
}

// SetIsDel sets the "is_del" field.
func (u *BusinessClientUpsertBulk) SetIsDel(v int) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetIsDel(v)
	})
}

// AddIsDel adds v to the "is_del" field.
func (u *BusinessClientUpsertBulk) AddIsDel(v int) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.AddIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateIsDel() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateIsDel()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *BusinessClientUpsertBulk) SetUpdateTime(v time.Time) *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BusinessClientUpsertBulk) UpdateUpdateTime() *BusinessClientUpsertBulk {
	return u.Update(func(s *BusinessClientUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *BusinessClientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BusinessClientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessClientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessClientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
