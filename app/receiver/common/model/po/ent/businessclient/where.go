// Code generated by ent, DO NOT EDIT.

package businessclient

import (
	"message-push/app/receiver/common/model/po/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldName, v))
}

// ClientKey applies equality check predicate on the "client_key" field. It's identical to ClientKeyEQ.
func ClientKey(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldClientKey, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldAppID, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldClientID, v))
}

// ClientType applies equality check predicate on the "client_type" field. It's identical to ClientTypeEQ.
func ClientType(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldClientType, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldIsDel, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContainsFold(FieldName, v))
}

// ClientKeyEQ applies the EQ predicate on the "client_key" field.
func ClientKeyEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldClientKey, v))
}

// ClientKeyNEQ applies the NEQ predicate on the "client_key" field.
func ClientKeyNEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldClientKey, v))
}

// ClientKeyIn applies the In predicate on the "client_key" field.
func ClientKeyIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldClientKey, vs...))
}

// ClientKeyNotIn applies the NotIn predicate on the "client_key" field.
func ClientKeyNotIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldClientKey, vs...))
}

// ClientKeyGT applies the GT predicate on the "client_key" field.
func ClientKeyGT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldClientKey, v))
}

// ClientKeyGTE applies the GTE predicate on the "client_key" field.
func ClientKeyGTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldClientKey, v))
}

// ClientKeyLT applies the LT predicate on the "client_key" field.
func ClientKeyLT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldClientKey, v))
}

// ClientKeyLTE applies the LTE predicate on the "client_key" field.
func ClientKeyLTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldClientKey, v))
}

// ClientKeyContains applies the Contains predicate on the "client_key" field.
func ClientKeyContains(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContains(FieldClientKey, v))
}

// ClientKeyHasPrefix applies the HasPrefix predicate on the "client_key" field.
func ClientKeyHasPrefix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasPrefix(FieldClientKey, v))
}

// ClientKeyHasSuffix applies the HasSuffix predicate on the "client_key" field.
func ClientKeyHasSuffix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasSuffix(FieldClientKey, v))
}

// ClientKeyEqualFold applies the EqualFold predicate on the "client_key" field.
func ClientKeyEqualFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEqualFold(FieldClientKey, v))
}

// ClientKeyContainsFold applies the ContainsFold predicate on the "client_key" field.
func ClientKeyContainsFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContainsFold(FieldClientKey, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContainsFold(FieldAppID, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContainsFold(FieldClientID, v))
}

// ClientTypeEQ applies the EQ predicate on the "client_type" field.
func ClientTypeEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldClientType, v))
}

// ClientTypeNEQ applies the NEQ predicate on the "client_type" field.
func ClientTypeNEQ(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldClientType, v))
}

// ClientTypeIn applies the In predicate on the "client_type" field.
func ClientTypeIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldClientType, vs...))
}

// ClientTypeNotIn applies the NotIn predicate on the "client_type" field.
func ClientTypeNotIn(vs ...string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldClientType, vs...))
}

// ClientTypeGT applies the GT predicate on the "client_type" field.
func ClientTypeGT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldClientType, v))
}

// ClientTypeGTE applies the GTE predicate on the "client_type" field.
func ClientTypeGTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldClientType, v))
}

// ClientTypeLT applies the LT predicate on the "client_type" field.
func ClientTypeLT(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldClientType, v))
}

// ClientTypeLTE applies the LTE predicate on the "client_type" field.
func ClientTypeLTE(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldClientType, v))
}

// ClientTypeContains applies the Contains predicate on the "client_type" field.
func ClientTypeContains(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContains(FieldClientType, v))
}

// ClientTypeHasPrefix applies the HasPrefix predicate on the "client_type" field.
func ClientTypeHasPrefix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasPrefix(FieldClientType, v))
}

// ClientTypeHasSuffix applies the HasSuffix predicate on the "client_type" field.
func ClientTypeHasSuffix(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldHasSuffix(FieldClientType, v))
}

// ClientTypeEqualFold applies the EqualFold predicate on the "client_type" field.
func ClientTypeEqualFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEqualFold(FieldClientType, v))
}

// ClientTypeContainsFold applies the ContainsFold predicate on the "client_type" field.
func ClientTypeContainsFold(v string) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldContainsFold(FieldClientType, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldIsDel, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.BusinessClient {
	return predicate.BusinessClient(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BusinessClient) predicate.BusinessClient {
	return predicate.BusinessClient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BusinessClient) predicate.BusinessClient {
	return predicate.BusinessClient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BusinessClient) predicate.BusinessClient {
	return predicate.BusinessClient(sql.NotPredicates(p))
}
