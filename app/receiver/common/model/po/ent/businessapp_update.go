// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"message-push/app/receiver/common/model/po/ent/businessapp"
	"message-push/app/receiver/common/model/po/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAppUpdate is the builder for updating BusinessApp entities.
type BusinessAppUpdate struct {
	config
	hooks     []Hook
	mutation  *BusinessAppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BusinessAppUpdate builder.
func (bau *BusinessAppUpdate) Where(ps ...predicate.BusinessApp) *BusinessAppUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetName sets the "name" field.
func (bau *BusinessAppUpdate) SetName(s string) *BusinessAppUpdate {
	bau.mutation.SetName(s)
	return bau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bau *BusinessAppUpdate) SetNillableName(s *string) *BusinessAppUpdate {
	if s != nil {
		bau.SetName(*s)
	}
	return bau
}

// SetAppKey sets the "app_key" field.
func (bau *BusinessAppUpdate) SetAppKey(s string) *BusinessAppUpdate {
	bau.mutation.SetAppKey(s)
	return bau
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (bau *BusinessAppUpdate) SetNillableAppKey(s *string) *BusinessAppUpdate {
	if s != nil {
		bau.SetAppKey(*s)
	}
	return bau
}

// SetAppID sets the "app_id" field.
func (bau *BusinessAppUpdate) SetAppID(s string) *BusinessAppUpdate {
	bau.mutation.SetAppID(s)
	return bau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (bau *BusinessAppUpdate) SetNillableAppID(s *string) *BusinessAppUpdate {
	if s != nil {
		bau.SetAppID(*s)
	}
	return bau
}

// SetAppType sets the "app_type" field.
func (bau *BusinessAppUpdate) SetAppType(s string) *BusinessAppUpdate {
	bau.mutation.SetAppType(s)
	return bau
}

// SetNillableAppType sets the "app_type" field if the given value is not nil.
func (bau *BusinessAppUpdate) SetNillableAppType(s *string) *BusinessAppUpdate {
	if s != nil {
		bau.SetAppType(*s)
	}
	return bau
}

// SetIsDel sets the "is_del" field.
func (bau *BusinessAppUpdate) SetIsDel(i int) *BusinessAppUpdate {
	bau.mutation.ResetIsDel()
	bau.mutation.SetIsDel(i)
	return bau
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (bau *BusinessAppUpdate) SetNillableIsDel(i *int) *BusinessAppUpdate {
	if i != nil {
		bau.SetIsDel(*i)
	}
	return bau
}

// AddIsDel adds i to the "is_del" field.
func (bau *BusinessAppUpdate) AddIsDel(i int) *BusinessAppUpdate {
	bau.mutation.AddIsDel(i)
	return bau
}

// SetUpdateTime sets the "update_time" field.
func (bau *BusinessAppUpdate) SetUpdateTime(t time.Time) *BusinessAppUpdate {
	bau.mutation.SetUpdateTime(t)
	return bau
}

// Mutation returns the BusinessAppMutation object of the builder.
func (bau *BusinessAppUpdate) Mutation() *BusinessAppMutation {
	return bau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BusinessAppUpdate) Save(ctx context.Context) (int, error) {
	bau.defaults()
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BusinessAppUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BusinessAppUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BusinessAppUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bau *BusinessAppUpdate) defaults() {
	if _, ok := bau.mutation.UpdateTime(); !ok {
		v := businessapp.UpdateDefaultUpdateTime()
		bau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bau *BusinessAppUpdate) check() error {
	if v, ok := bau.mutation.Name(); ok {
		if err := businessapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.name": %w`, err)}
		}
	}
	if v, ok := bau.mutation.AppKey(); ok {
		if err := businessapp.AppKeyValidator(v); err != nil {
			return &ValidationError{Name: "app_key", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_key": %w`, err)}
		}
	}
	if v, ok := bau.mutation.AppID(); ok {
		if err := businessapp.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_id": %w`, err)}
		}
	}
	if v, ok := bau.mutation.AppType(); ok {
		if err := businessapp.AppTypeValidator(v); err != nil {
			return &ValidationError{Name: "app_type", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bau *BusinessAppUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BusinessAppUpdate {
	bau.modifiers = append(bau.modifiers, modifiers...)
	return bau
}

func (bau *BusinessAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessapp.Table, businessapp.Columns, sqlgraph.NewFieldSpec(businessapp.FieldID, field.TypeInt))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.Name(); ok {
		_spec.SetField(businessapp.FieldName, field.TypeString, value)
	}
	if value, ok := bau.mutation.AppKey(); ok {
		_spec.SetField(businessapp.FieldAppKey, field.TypeString, value)
	}
	if value, ok := bau.mutation.AppID(); ok {
		_spec.SetField(businessapp.FieldAppID, field.TypeString, value)
	}
	if value, ok := bau.mutation.AppType(); ok {
		_spec.SetField(businessapp.FieldAppType, field.TypeString, value)
	}
	if value, ok := bau.mutation.IsDel(); ok {
		_spec.SetField(businessapp.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := bau.mutation.AddedIsDel(); ok {
		_spec.AddField(businessapp.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := bau.mutation.UpdateTime(); ok {
		_spec.SetField(businessapp.FieldUpdateTime, field.TypeTime, value)
	}
	_spec.AddModifiers(bau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BusinessAppUpdateOne is the builder for updating a single BusinessApp entity.
type BusinessAppUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BusinessAppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (bauo *BusinessAppUpdateOne) SetName(s string) *BusinessAppUpdateOne {
	bauo.mutation.SetName(s)
	return bauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bauo *BusinessAppUpdateOne) SetNillableName(s *string) *BusinessAppUpdateOne {
	if s != nil {
		bauo.SetName(*s)
	}
	return bauo
}

// SetAppKey sets the "app_key" field.
func (bauo *BusinessAppUpdateOne) SetAppKey(s string) *BusinessAppUpdateOne {
	bauo.mutation.SetAppKey(s)
	return bauo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (bauo *BusinessAppUpdateOne) SetNillableAppKey(s *string) *BusinessAppUpdateOne {
	if s != nil {
		bauo.SetAppKey(*s)
	}
	return bauo
}

// SetAppID sets the "app_id" field.
func (bauo *BusinessAppUpdateOne) SetAppID(s string) *BusinessAppUpdateOne {
	bauo.mutation.SetAppID(s)
	return bauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (bauo *BusinessAppUpdateOne) SetNillableAppID(s *string) *BusinessAppUpdateOne {
	if s != nil {
		bauo.SetAppID(*s)
	}
	return bauo
}

// SetAppType sets the "app_type" field.
func (bauo *BusinessAppUpdateOne) SetAppType(s string) *BusinessAppUpdateOne {
	bauo.mutation.SetAppType(s)
	return bauo
}

// SetNillableAppType sets the "app_type" field if the given value is not nil.
func (bauo *BusinessAppUpdateOne) SetNillableAppType(s *string) *BusinessAppUpdateOne {
	if s != nil {
		bauo.SetAppType(*s)
	}
	return bauo
}

// SetIsDel sets the "is_del" field.
func (bauo *BusinessAppUpdateOne) SetIsDel(i int) *BusinessAppUpdateOne {
	bauo.mutation.ResetIsDel()
	bauo.mutation.SetIsDel(i)
	return bauo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (bauo *BusinessAppUpdateOne) SetNillableIsDel(i *int) *BusinessAppUpdateOne {
	if i != nil {
		bauo.SetIsDel(*i)
	}
	return bauo
}

// AddIsDel adds i to the "is_del" field.
func (bauo *BusinessAppUpdateOne) AddIsDel(i int) *BusinessAppUpdateOne {
	bauo.mutation.AddIsDel(i)
	return bauo
}

// SetUpdateTime sets the "update_time" field.
func (bauo *BusinessAppUpdateOne) SetUpdateTime(t time.Time) *BusinessAppUpdateOne {
	bauo.mutation.SetUpdateTime(t)
	return bauo
}

// Mutation returns the BusinessAppMutation object of the builder.
func (bauo *BusinessAppUpdateOne) Mutation() *BusinessAppMutation {
	return bauo.mutation
}

// Where appends a list predicates to the BusinessAppUpdate builder.
func (bauo *BusinessAppUpdateOne) Where(ps ...predicate.BusinessApp) *BusinessAppUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BusinessAppUpdateOne) Select(field string, fields ...string) *BusinessAppUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BusinessApp entity.
func (bauo *BusinessAppUpdateOne) Save(ctx context.Context) (*BusinessApp, error) {
	bauo.defaults()
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BusinessAppUpdateOne) SaveX(ctx context.Context) *BusinessApp {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BusinessAppUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BusinessAppUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauo *BusinessAppUpdateOne) defaults() {
	if _, ok := bauo.mutation.UpdateTime(); !ok {
		v := businessapp.UpdateDefaultUpdateTime()
		bauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bauo *BusinessAppUpdateOne) check() error {
	if v, ok := bauo.mutation.Name(); ok {
		if err := businessapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.name": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.AppKey(); ok {
		if err := businessapp.AppKeyValidator(v); err != nil {
			return &ValidationError{Name: "app_key", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_key": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.AppID(); ok {
		if err := businessapp.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_id": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.AppType(); ok {
		if err := businessapp.AppTypeValidator(v); err != nil {
			return &ValidationError{Name: "app_type", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bauo *BusinessAppUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BusinessAppUpdateOne {
	bauo.modifiers = append(bauo.modifiers, modifiers...)
	return bauo
}

func (bauo *BusinessAppUpdateOne) sqlSave(ctx context.Context) (_node *BusinessApp, err error) {
	if err := bauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessapp.Table, businessapp.Columns, sqlgraph.NewFieldSpec(businessapp.FieldID, field.TypeInt))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusinessApp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessapp.FieldID)
		for _, f := range fields {
			if !businessapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != businessapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.Name(); ok {
		_spec.SetField(businessapp.FieldName, field.TypeString, value)
	}
	if value, ok := bauo.mutation.AppKey(); ok {
		_spec.SetField(businessapp.FieldAppKey, field.TypeString, value)
	}
	if value, ok := bauo.mutation.AppID(); ok {
		_spec.SetField(businessapp.FieldAppID, field.TypeString, value)
	}
	if value, ok := bauo.mutation.AppType(); ok {
		_spec.SetField(businessapp.FieldAppType, field.TypeString, value)
	}
	if value, ok := bauo.mutation.IsDel(); ok {
		_spec.SetField(businessapp.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := bauo.mutation.AddedIsDel(); ok {
		_spec.AddField(businessapp.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := bauo.mutation.UpdateTime(); ok {
		_spec.SetField(businessapp.FieldUpdateTime, field.TypeTime, value)
	}
	_spec.AddModifiers(bauo.modifiers...)
	_node = &BusinessApp{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}
