// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"message-push/app/access/common/model/po/ent/demo"
	"message-push/app/access/common/model/po/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DemoUpdate is the builder for updating Demo entities.
type DemoUpdate struct {
	config
	hooks     []Hook
	mutation  *DemoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DemoUpdate builder.
func (du *DemoUpdate) Where(ps ...predicate.Demo) *DemoUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DemoUpdate) SetName(s string) *DemoUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DemoUpdate) SetNillableName(s *string) *DemoUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DemoUpdate) ClearName() *DemoUpdate {
	du.mutation.ClearName()
	return du
}

// SetCreateTime sets the "create_time" field.
func (du *DemoUpdate) SetCreateTime(t time.Time) *DemoUpdate {
	du.mutation.SetCreateTime(t)
	return du
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (du *DemoUpdate) SetNillableCreateTime(t *time.Time) *DemoUpdate {
	if t != nil {
		du.SetCreateTime(*t)
	}
	return du
}

// ClearCreateTime clears the value of the "create_time" field.
func (du *DemoUpdate) ClearCreateTime() *DemoUpdate {
	du.mutation.ClearCreateTime()
	return du
}

// Mutation returns the DemoMutation object of the builder.
func (du *DemoUpdate) Mutation() *DemoMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DemoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DemoUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DemoUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DemoUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DemoUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := demo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Demo.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DemoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DemoUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(demo.Table, demo.Columns, sqlgraph.NewFieldSpec(demo.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(demo.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(demo.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.CreateTime(); ok {
		_spec.SetField(demo.FieldCreateTime, field.TypeTime, value)
	}
	if du.mutation.CreateTimeCleared() {
		_spec.ClearField(demo.FieldCreateTime, field.TypeTime)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DemoUpdateOne is the builder for updating a single Demo entity.
type DemoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DemoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (duo *DemoUpdateOne) SetName(s string) *DemoUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableName(s *string) *DemoUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DemoUpdateOne) ClearName() *DemoUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetCreateTime sets the "create_time" field.
func (duo *DemoUpdateOne) SetCreateTime(t time.Time) *DemoUpdateOne {
	duo.mutation.SetCreateTime(t)
	return duo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableCreateTime(t *time.Time) *DemoUpdateOne {
	if t != nil {
		duo.SetCreateTime(*t)
	}
	return duo
}

// ClearCreateTime clears the value of the "create_time" field.
func (duo *DemoUpdateOne) ClearCreateTime() *DemoUpdateOne {
	duo.mutation.ClearCreateTime()
	return duo
}

// Mutation returns the DemoMutation object of the builder.
func (duo *DemoUpdateOne) Mutation() *DemoMutation {
	return duo.mutation
}

// Where appends a list predicates to the DemoUpdate builder.
func (duo *DemoUpdateOne) Where(ps ...predicate.Demo) *DemoUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DemoUpdateOne) Select(field string, fields ...string) *DemoUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Demo entity.
func (duo *DemoUpdateOne) Save(ctx context.Context) (*Demo, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DemoUpdateOne) SaveX(ctx context.Context) *Demo {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DemoUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DemoUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DemoUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := demo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Demo.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DemoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DemoUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DemoUpdateOne) sqlSave(ctx context.Context) (_node *Demo, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(demo.Table, demo.Columns, sqlgraph.NewFieldSpec(demo.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Demo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, demo.FieldID)
		for _, f := range fields {
			if !demo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != demo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(demo.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(demo.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.CreateTime(); ok {
		_spec.SetField(demo.FieldCreateTime, field.TypeTime, value)
	}
	if duo.mutation.CreateTimeCleared() {
		_spec.ClearField(demo.FieldCreateTime, field.TypeTime)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Demo{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
