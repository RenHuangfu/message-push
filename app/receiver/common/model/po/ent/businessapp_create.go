// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"message-push/app/receiver/common/model/po/ent/businessapp"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAppCreate is the builder for creating a BusinessApp entity.
type BusinessAppCreate struct {
	config
	mutation *BusinessAppMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (bac *BusinessAppCreate) SetName(s string) *BusinessAppCreate {
	bac.mutation.SetName(s)
	return bac
}

// SetAppKey sets the "app_key" field.
func (bac *BusinessAppCreate) SetAppKey(s string) *BusinessAppCreate {
	bac.mutation.SetAppKey(s)
	return bac
}

// SetAppID sets the "app_id" field.
func (bac *BusinessAppCreate) SetAppID(s string) *BusinessAppCreate {
	bac.mutation.SetAppID(s)
	return bac
}

// SetAppType sets the "app_type" field.
func (bac *BusinessAppCreate) SetAppType(s string) *BusinessAppCreate {
	bac.mutation.SetAppType(s)
	return bac
}

// SetIsDel sets the "is_del" field.
func (bac *BusinessAppCreate) SetIsDel(i int) *BusinessAppCreate {
	bac.mutation.SetIsDel(i)
	return bac
}

// SetCreateTime sets the "create_time" field.
func (bac *BusinessAppCreate) SetCreateTime(t time.Time) *BusinessAppCreate {
	bac.mutation.SetCreateTime(t)
	return bac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bac *BusinessAppCreate) SetNillableCreateTime(t *time.Time) *BusinessAppCreate {
	if t != nil {
		bac.SetCreateTime(*t)
	}
	return bac
}

// SetUpdateTime sets the "update_time" field.
func (bac *BusinessAppCreate) SetUpdateTime(t time.Time) *BusinessAppCreate {
	bac.mutation.SetUpdateTime(t)
	return bac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bac *BusinessAppCreate) SetNillableUpdateTime(t *time.Time) *BusinessAppCreate {
	if t != nil {
		bac.SetUpdateTime(*t)
	}
	return bac
}

// SetID sets the "id" field.
func (bac *BusinessAppCreate) SetID(i int) *BusinessAppCreate {
	bac.mutation.SetID(i)
	return bac
}

// Mutation returns the BusinessAppMutation object of the builder.
func (bac *BusinessAppCreate) Mutation() *BusinessAppMutation {
	return bac.mutation
}

// Save creates the BusinessApp in the database.
func (bac *BusinessAppCreate) Save(ctx context.Context) (*BusinessApp, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BusinessAppCreate) SaveX(ctx context.Context) *BusinessApp {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BusinessAppCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BusinessAppCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BusinessAppCreate) defaults() {
	if _, ok := bac.mutation.CreateTime(); !ok {
		v := businessapp.DefaultCreateTime()
		bac.mutation.SetCreateTime(v)
	}
	if _, ok := bac.mutation.UpdateTime(); !ok {
		v := businessapp.DefaultUpdateTime()
		bac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BusinessAppCreate) check() error {
	if _, ok := bac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BusinessApp.name"`)}
	}
	if v, ok := bac.mutation.Name(); ok {
		if err := businessapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.name": %w`, err)}
		}
	}
	if _, ok := bac.mutation.AppKey(); !ok {
		return &ValidationError{Name: "app_key", err: errors.New(`ent: missing required field "BusinessApp.app_key"`)}
	}
	if v, ok := bac.mutation.AppKey(); ok {
		if err := businessapp.AppKeyValidator(v); err != nil {
			return &ValidationError{Name: "app_key", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_key": %w`, err)}
		}
	}
	if _, ok := bac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "BusinessApp.app_id"`)}
	}
	if v, ok := bac.mutation.AppID(); ok {
		if err := businessapp.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_id": %w`, err)}
		}
	}
	if _, ok := bac.mutation.AppType(); !ok {
		return &ValidationError{Name: "app_type", err: errors.New(`ent: missing required field "BusinessApp.app_type"`)}
	}
	if v, ok := bac.mutation.AppType(); ok {
		if err := businessapp.AppTypeValidator(v); err != nil {
			return &ValidationError{Name: "app_type", err: fmt.Errorf(`ent: validator failed for field "BusinessApp.app_type": %w`, err)}
		}
	}
	if _, ok := bac.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "BusinessApp.is_del"`)}
	}
	if _, ok := bac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BusinessApp.create_time"`)}
	}
	if _, ok := bac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BusinessApp.update_time"`)}
	}
	return nil
}

func (bac *BusinessAppCreate) sqlSave(ctx context.Context) (*BusinessApp, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BusinessAppCreate) createSpec() (*BusinessApp, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessApp{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(businessapp.Table, sqlgraph.NewFieldSpec(businessapp.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bac.conflict
	if id, ok := bac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bac.mutation.Name(); ok {
		_spec.SetField(businessapp.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bac.mutation.AppKey(); ok {
		_spec.SetField(businessapp.FieldAppKey, field.TypeString, value)
		_node.AppKey = value
	}
	if value, ok := bac.mutation.AppID(); ok {
		_spec.SetField(businessapp.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := bac.mutation.AppType(); ok {
		_spec.SetField(businessapp.FieldAppType, field.TypeString, value)
		_node.AppType = value
	}
	if value, ok := bac.mutation.IsDel(); ok {
		_spec.SetField(businessapp.FieldIsDel, field.TypeInt, value)
		_node.IsDel = value
	}
	if value, ok := bac.mutation.CreateTime(); ok {
		_spec.SetField(businessapp.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bac.mutation.UpdateTime(); ok {
		_spec.SetField(businessapp.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BusinessApp.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessAppUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (bac *BusinessAppCreate) OnConflict(opts ...sql.ConflictOption) *BusinessAppUpsertOne {
	bac.conflict = opts
	return &BusinessAppUpsertOne{
		create: bac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BusinessApp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bac *BusinessAppCreate) OnConflictColumns(columns ...string) *BusinessAppUpsertOne {
	bac.conflict = append(bac.conflict, sql.ConflictColumns(columns...))
	return &BusinessAppUpsertOne{
		create: bac,
	}
}

type (
	// BusinessAppUpsertOne is the builder for "upsert"-ing
	//  one BusinessApp node.
	BusinessAppUpsertOne struct {
		create *BusinessAppCreate
	}

	// BusinessAppUpsert is the "OnConflict" setter.
	BusinessAppUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *BusinessAppUpsert) SetName(v string) *BusinessAppUpsert {
	u.Set(businessapp.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BusinessAppUpsert) UpdateName() *BusinessAppUpsert {
	u.SetExcluded(businessapp.FieldName)
	return u
}

// SetAppKey sets the "app_key" field.
func (u *BusinessAppUpsert) SetAppKey(v string) *BusinessAppUpsert {
	u.Set(businessapp.FieldAppKey, v)
	return u
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *BusinessAppUpsert) UpdateAppKey() *BusinessAppUpsert {
	u.SetExcluded(businessapp.FieldAppKey)
	return u
}

// SetAppID sets the "app_id" field.
func (u *BusinessAppUpsert) SetAppID(v string) *BusinessAppUpsert {
	u.Set(businessapp.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BusinessAppUpsert) UpdateAppID() *BusinessAppUpsert {
	u.SetExcluded(businessapp.FieldAppID)
	return u
}

// SetAppType sets the "app_type" field.
func (u *BusinessAppUpsert) SetAppType(v string) *BusinessAppUpsert {
	u.Set(businessapp.FieldAppType, v)
	return u
}

// UpdateAppType sets the "app_type" field to the value that was provided on create.
func (u *BusinessAppUpsert) UpdateAppType() *BusinessAppUpsert {
	u.SetExcluded(businessapp.FieldAppType)
	return u
}

// SetIsDel sets the "is_del" field.
func (u *BusinessAppUpsert) SetIsDel(v int) *BusinessAppUpsert {
	u.Set(businessapp.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *BusinessAppUpsert) UpdateIsDel() *BusinessAppUpsert {
	u.SetExcluded(businessapp.FieldIsDel)
	return u
}

// AddIsDel adds v to the "is_del" field.
func (u *BusinessAppUpsert) AddIsDel(v int) *BusinessAppUpsert {
	u.Add(businessapp.FieldIsDel, v)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BusinessAppUpsert) SetUpdateTime(v time.Time) *BusinessAppUpsert {
	u.Set(businessapp.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BusinessAppUpsert) UpdateUpdateTime() *BusinessAppUpsert {
	u.SetExcluded(businessapp.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BusinessApp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(businessapp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BusinessAppUpsertOne) UpdateNewValues() *BusinessAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(businessapp.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(businessapp.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BusinessApp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BusinessAppUpsertOne) Ignore() *BusinessAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessAppUpsertOne) DoNothing() *BusinessAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessAppCreate.OnConflict
// documentation for more info.
func (u *BusinessAppUpsertOne) Update(set func(*BusinessAppUpsert)) *BusinessAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessAppUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BusinessAppUpsertOne) SetName(v string) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BusinessAppUpsertOne) UpdateName() *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateName()
	})
}

// SetAppKey sets the "app_key" field.
func (u *BusinessAppUpsertOne) SetAppKey(v string) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *BusinessAppUpsertOne) UpdateAppKey() *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateAppKey()
	})
}

// SetAppID sets the "app_id" field.
func (u *BusinessAppUpsertOne) SetAppID(v string) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BusinessAppUpsertOne) UpdateAppID() *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateAppID()
	})
}

// SetAppType sets the "app_type" field.
func (u *BusinessAppUpsertOne) SetAppType(v string) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetAppType(v)
	})
}

// UpdateAppType sets the "app_type" field to the value that was provided on create.
func (u *BusinessAppUpsertOne) UpdateAppType() *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateAppType()
	})
}

// SetIsDel sets the "is_del" field.
func (u *BusinessAppUpsertOne) SetIsDel(v int) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetIsDel(v)
	})
}

// AddIsDel adds v to the "is_del" field.
func (u *BusinessAppUpsertOne) AddIsDel(v int) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.AddIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *BusinessAppUpsertOne) UpdateIsDel() *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateIsDel()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *BusinessAppUpsertOne) SetUpdateTime(v time.Time) *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BusinessAppUpsertOne) UpdateUpdateTime() *BusinessAppUpsertOne {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *BusinessAppUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessAppCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessAppUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BusinessAppUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BusinessAppUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BusinessAppCreateBulk is the builder for creating many BusinessApp entities in bulk.
type BusinessAppCreateBulk struct {
	config
	err      error
	builders []*BusinessAppCreate
	conflict []sql.ConflictOption
}

// Save creates the BusinessApp entities in the database.
func (bacb *BusinessAppCreateBulk) Save(ctx context.Context) ([]*BusinessApp, error) {
	if bacb.err != nil {
		return nil, bacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BusinessApp, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessAppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BusinessAppCreateBulk) SaveX(ctx context.Context) []*BusinessApp {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BusinessAppCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BusinessAppCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BusinessApp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessAppUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (bacb *BusinessAppCreateBulk) OnConflict(opts ...sql.ConflictOption) *BusinessAppUpsertBulk {
	bacb.conflict = opts
	return &BusinessAppUpsertBulk{
		create: bacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BusinessApp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bacb *BusinessAppCreateBulk) OnConflictColumns(columns ...string) *BusinessAppUpsertBulk {
	bacb.conflict = append(bacb.conflict, sql.ConflictColumns(columns...))
	return &BusinessAppUpsertBulk{
		create: bacb,
	}
}

// BusinessAppUpsertBulk is the builder for "upsert"-ing
// a bulk of BusinessApp nodes.
type BusinessAppUpsertBulk struct {
	create *BusinessAppCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BusinessApp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(businessapp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BusinessAppUpsertBulk) UpdateNewValues() *BusinessAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(businessapp.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(businessapp.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BusinessApp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BusinessAppUpsertBulk) Ignore() *BusinessAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessAppUpsertBulk) DoNothing() *BusinessAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessAppCreateBulk.OnConflict
// documentation for more info.
func (u *BusinessAppUpsertBulk) Update(set func(*BusinessAppUpsert)) *BusinessAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessAppUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BusinessAppUpsertBulk) SetName(v string) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BusinessAppUpsertBulk) UpdateName() *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateName()
	})
}

// SetAppKey sets the "app_key" field.
func (u *BusinessAppUpsertBulk) SetAppKey(v string) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *BusinessAppUpsertBulk) UpdateAppKey() *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateAppKey()
	})
}

// SetAppID sets the "app_id" field.
func (u *BusinessAppUpsertBulk) SetAppID(v string) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *BusinessAppUpsertBulk) UpdateAppID() *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateAppID()
	})
}

// SetAppType sets the "app_type" field.
func (u *BusinessAppUpsertBulk) SetAppType(v string) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetAppType(v)
	})
}

// UpdateAppType sets the "app_type" field to the value that was provided on create.
func (u *BusinessAppUpsertBulk) UpdateAppType() *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateAppType()
	})
}

// SetIsDel sets the "is_del" field.
func (u *BusinessAppUpsertBulk) SetIsDel(v int) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetIsDel(v)
	})
}

// AddIsDel adds v to the "is_del" field.
func (u *BusinessAppUpsertBulk) AddIsDel(v int) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.AddIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *BusinessAppUpsertBulk) UpdateIsDel() *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateIsDel()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *BusinessAppUpsertBulk) SetUpdateTime(v time.Time) *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BusinessAppUpsertBulk) UpdateUpdateTime() *BusinessAppUpsertBulk {
	return u.Update(func(s *BusinessAppUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *BusinessAppUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BusinessAppCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessAppCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessAppUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
