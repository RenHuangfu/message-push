// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"message-push/app/receiver/common/model/po/ent/businessclient"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BusinessClient is the model entity for the BusinessClient schema.
type BusinessClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 客户端名称
	Name string `json:"name,omitempty"`
	// 客户端key
	ClientKey string `json:"client_key,omitempty"`
	// 应用id
	AppID string `json:"app_id,omitempty"`
	// 客户端id
	ClientID string `json:"client_id,omitempty"`
	// 客户端类型
	ClientType string `json:"client_type,omitempty"`
	// 是否删除
	IsDel int `json:"is_del,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businessclient.FieldID, businessclient.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case businessclient.FieldName, businessclient.FieldClientKey, businessclient.FieldAppID, businessclient.FieldClientID, businessclient.FieldClientType:
			values[i] = new(sql.NullString)
		case businessclient.FieldCreateTime, businessclient.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessClient fields.
func (bc *BusinessClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businessclient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bc.ID = int(value.Int64)
		case businessclient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bc.Name = value.String
			}
		case businessclient.FieldClientKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_key", values[i])
			} else if value.Valid {
				bc.ClientKey = value.String
			}
		case businessclient.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				bc.AppID = value.String
			}
		case businessclient.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				bc.ClientID = value.String
			}
		case businessclient.FieldClientType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_type", values[i])
			} else if value.Valid {
				bc.ClientType = value.String
			}
		case businessclient.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				bc.IsDel = int(value.Int64)
			}
		case businessclient.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bc.CreateTime = value.Time
			}
		case businessclient.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bc.UpdateTime = value.Time
			}
		default:
			bc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusinessClient.
// This includes values selected through modifiers, order, etc.
func (bc *BusinessClient) Value(name string) (ent.Value, error) {
	return bc.selectValues.Get(name)
}

// Update returns a builder for updating this BusinessClient.
// Note that you need to call BusinessClient.Unwrap() before calling this method if this BusinessClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BusinessClient) Update() *BusinessClientUpdateOne {
	return NewBusinessClientClient(bc.config).UpdateOne(bc)
}

// Unwrap unwraps the BusinessClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BusinessClient) Unwrap() *BusinessClient {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessClient is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BusinessClient) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("name=")
	builder.WriteString(bc.Name)
	builder.WriteString(", ")
	builder.WriteString("client_key=")
	builder.WriteString(bc.ClientKey)
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(bc.AppID)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(bc.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_type=")
	builder.WriteString(bc.ClientType)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", bc.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(bc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bc.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessClients is a parsable slice of BusinessClient.
type BusinessClients []*BusinessClient
