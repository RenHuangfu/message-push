// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"message-push/app/receiver/common/model/po/ent/message"
	"message-push/app/receiver/common/model/po/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetAppID sets the "app_id" field.
func (mu *MessageUpdate) SetAppID(i int) *MessageUpdate {
	mu.mutation.ResetAppID()
	mu.mutation.SetAppID(i)
	return mu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableAppID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetAppID(*i)
	}
	return mu
}

// AddAppID adds i to the "app_id" field.
func (mu *MessageUpdate) AddAppID(i int) *MessageUpdate {
	mu.mutation.AddAppID(i)
	return mu
}

// SetClientIds sets the "client_ids" field.
func (mu *MessageUpdate) SetClientIds(i []int) *MessageUpdate {
	mu.mutation.SetClientIds(i)
	return mu
}

// AppendClientIds appends i to the "client_ids" field.
func (mu *MessageUpdate) AppendClientIds(i []int) *MessageUpdate {
	mu.mutation.AppendClientIds(i)
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(s string) *MessageUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableContent(s *string) *MessageUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// SetDelay sets the "delay" field.
func (mu *MessageUpdate) SetDelay(i int) *MessageUpdate {
	mu.mutation.ResetDelay()
	mu.mutation.SetDelay(i)
	return mu
}

// SetNillableDelay sets the "delay" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableDelay(i *int) *MessageUpdate {
	if i != nil {
		mu.SetDelay(*i)
	}
	return mu
}

// AddDelay adds i to the "delay" field.
func (mu *MessageUpdate) AddDelay(i int) *MessageUpdate {
	mu.mutation.AddDelay(i)
	return mu
}

// SetSendTime sets the "send_time" field.
func (mu *MessageUpdate) SetSendTime(t time.Time) *MessageUpdate {
	mu.mutation.SetSendTime(t)
	return mu
}

// SetNillableSendTime sets the "send_time" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSendTime(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetSendTime(*t)
	}
	return mu
}

// SetSendCount sets the "send_count" field.
func (mu *MessageUpdate) SetSendCount(i int) *MessageUpdate {
	mu.mutation.ResetSendCount()
	mu.mutation.SetSendCount(i)
	return mu
}

// SetNillableSendCount sets the "send_count" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSendCount(i *int) *MessageUpdate {
	if i != nil {
		mu.SetSendCount(*i)
	}
	return mu
}

// AddSendCount adds i to the "send_count" field.
func (mu *MessageUpdate) AddSendCount(i int) *MessageUpdate {
	mu.mutation.AddSendCount(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MessageUpdate) SetStatus(i int) *MessageUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableStatus(i *int) *MessageUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MessageUpdate) AddStatus(i int) *MessageUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// SetIsDel sets the "is_del" field.
func (mu *MessageUpdate) SetIsDel(i int) *MessageUpdate {
	mu.mutation.ResetIsDel()
	mu.mutation.SetIsDel(i)
	return mu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableIsDel(i *int) *MessageUpdate {
	if i != nil {
		mu.SetIsDel(*i)
	}
	return mu
}

// AddIsDel adds i to the "is_del" field.
func (mu *MessageUpdate) AddIsDel(i int) *MessageUpdate {
	mu.mutation.AddIsDel(i)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MessageUpdate) SetUpdateTime(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := message.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.AppID(); ok {
		_spec.SetField(message.FieldAppID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedAppID(); ok {
		_spec.AddField(message.FieldAppID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.ClientIds(); ok {
		_spec.SetField(message.FieldClientIds, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedClientIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, message.FieldClientIds, value)
		})
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if value, ok := mu.mutation.Delay(); ok {
		_spec.SetField(message.FieldDelay, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedDelay(); ok {
		_spec.AddField(message.FieldDelay, field.TypeInt, value)
	}
	if value, ok := mu.mutation.SendTime(); ok {
		_spec.SetField(message.FieldSendTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.SendCount(); ok {
		_spec.SetField(message.FieldSendCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedSendCount(); ok {
		_spec.AddField(message.FieldSendCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(message.FieldStatus, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(message.FieldStatus, field.TypeInt, value)
	}
	if value, ok := mu.mutation.IsDel(); ok {
		_spec.SetField(message.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedIsDel(); ok {
		_spec.AddField(message.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(message.FieldUpdateTime, field.TypeTime, value)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAppID sets the "app_id" field.
func (muo *MessageUpdateOne) SetAppID(i int) *MessageUpdateOne {
	muo.mutation.ResetAppID()
	muo.mutation.SetAppID(i)
	return muo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableAppID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetAppID(*i)
	}
	return muo
}

// AddAppID adds i to the "app_id" field.
func (muo *MessageUpdateOne) AddAppID(i int) *MessageUpdateOne {
	muo.mutation.AddAppID(i)
	return muo
}

// SetClientIds sets the "client_ids" field.
func (muo *MessageUpdateOne) SetClientIds(i []int) *MessageUpdateOne {
	muo.mutation.SetClientIds(i)
	return muo
}

// AppendClientIds appends i to the "client_ids" field.
func (muo *MessageUpdateOne) AppendClientIds(i []int) *MessageUpdateOne {
	muo.mutation.AppendClientIds(i)
	return muo
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(s string) *MessageUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableContent(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// SetDelay sets the "delay" field.
func (muo *MessageUpdateOne) SetDelay(i int) *MessageUpdateOne {
	muo.mutation.ResetDelay()
	muo.mutation.SetDelay(i)
	return muo
}

// SetNillableDelay sets the "delay" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableDelay(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetDelay(*i)
	}
	return muo
}

// AddDelay adds i to the "delay" field.
func (muo *MessageUpdateOne) AddDelay(i int) *MessageUpdateOne {
	muo.mutation.AddDelay(i)
	return muo
}

// SetSendTime sets the "send_time" field.
func (muo *MessageUpdateOne) SetSendTime(t time.Time) *MessageUpdateOne {
	muo.mutation.SetSendTime(t)
	return muo
}

// SetNillableSendTime sets the "send_time" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSendTime(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetSendTime(*t)
	}
	return muo
}

// SetSendCount sets the "send_count" field.
func (muo *MessageUpdateOne) SetSendCount(i int) *MessageUpdateOne {
	muo.mutation.ResetSendCount()
	muo.mutation.SetSendCount(i)
	return muo
}

// SetNillableSendCount sets the "send_count" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSendCount(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetSendCount(*i)
	}
	return muo
}

// AddSendCount adds i to the "send_count" field.
func (muo *MessageUpdateOne) AddSendCount(i int) *MessageUpdateOne {
	muo.mutation.AddSendCount(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MessageUpdateOne) SetStatus(i int) *MessageUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableStatus(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MessageUpdateOne) AddStatus(i int) *MessageUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// SetIsDel sets the "is_del" field.
func (muo *MessageUpdateOne) SetIsDel(i int) *MessageUpdateOne {
	muo.mutation.ResetIsDel()
	muo.mutation.SetIsDel(i)
	return muo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableIsDel(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetIsDel(*i)
	}
	return muo
}

// AddIsDel adds i to the "is_del" field.
func (muo *MessageUpdateOne) AddIsDel(i int) *MessageUpdateOne {
	muo.mutation.AddIsDel(i)
	return muo
}

// SetUpdateTime sets the "update_time" field.
func (muo *MessageUpdateOne) SetUpdateTime(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := message.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.AppID(); ok {
		_spec.SetField(message.FieldAppID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedAppID(); ok {
		_spec.AddField(message.FieldAppID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.ClientIds(); ok {
		_spec.SetField(message.FieldClientIds, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedClientIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, message.FieldClientIds, value)
		})
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if value, ok := muo.mutation.Delay(); ok {
		_spec.SetField(message.FieldDelay, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedDelay(); ok {
		_spec.AddField(message.FieldDelay, field.TypeInt, value)
	}
	if value, ok := muo.mutation.SendTime(); ok {
		_spec.SetField(message.FieldSendTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.SendCount(); ok {
		_spec.SetField(message.FieldSendCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedSendCount(); ok {
		_spec.AddField(message.FieldSendCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(message.FieldStatus, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(message.FieldStatus, field.TypeInt, value)
	}
	if value, ok := muo.mutation.IsDel(); ok {
		_spec.SetField(message.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedIsDel(); ok {
		_spec.AddField(message.FieldIsDel, field.TypeInt, value)
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(message.FieldUpdateTime, field.TypeTime, value)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
