// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"message-push/app/receiver/service/internal/conf"
	"message-push/app/receiver/service/internal/data"
	"message-push/app/receiver/service/internal/server"
	"message-push/app/receiver/service/internal/service"
	"message-push/app/receiver/service/internal/usecase"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	businessRepo := data.NewBusinessRepo(dataData, logger)
	businessUsecase := usecase.NewBusinessUsecase(logger, businessRepo)
	businessService := service.NewBusinessService(logger, businessUsecase)
	messageRepo := data.NewMessageRepo(logger, dataData)
	messageUsecase := usecase.NewMessageUsecase(logger, messageRepo)
	messageService := service.NewMessageService(logger, messageUsecase)
	httpServer := server.NewHTTPServer(bootstrap, businessService, messageService)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
