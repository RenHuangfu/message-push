// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"message-push/app/receiver/common/model/po/ent/demo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DemoCreate is the builder for creating a Demo entity.
type DemoCreate struct {
	config
	mutation *DemoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (dc *DemoCreate) SetName(s string) *DemoCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DemoCreate) SetNillableName(s *string) *DemoCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetCreateTime sets the "create_time" field.
func (dc *DemoCreate) SetCreateTime(t time.Time) *DemoCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DemoCreate) SetNillableCreateTime(t *time.Time) *DemoCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DemoCreate) SetID(i int) *DemoCreate {
	dc.mutation.SetID(i)
	return dc
}

// Mutation returns the DemoMutation object of the builder.
func (dc *DemoCreate) Mutation() *DemoMutation {
	return dc.mutation
}

// Save creates the Demo in the database.
func (dc *DemoCreate) Save(ctx context.Context) (*Demo, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DemoCreate) SaveX(ctx context.Context) *Demo {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DemoCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DemoCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DemoCreate) check() error {
	if v, ok := dc.mutation.Name(); ok {
		if err := demo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Demo.name": %w`, err)}
		}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := demo.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Demo.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DemoCreate) sqlSave(ctx context.Context) (*Demo, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DemoCreate) createSpec() (*Demo, *sqlgraph.CreateSpec) {
	var (
		_node = &Demo{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(demo.Table, sqlgraph.NewFieldSpec(demo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(demo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.SetField(demo.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Demo.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DemoUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dc *DemoCreate) OnConflict(opts ...sql.ConflictOption) *DemoUpsertOne {
	dc.conflict = opts
	return &DemoUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Demo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DemoCreate) OnConflictColumns(columns ...string) *DemoUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DemoUpsertOne{
		create: dc,
	}
}

type (
	// DemoUpsertOne is the builder for "upsert"-ing
	//  one Demo node.
	DemoUpsertOne struct {
		create *DemoCreate
	}

	// DemoUpsert is the "OnConflict" setter.
	DemoUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DemoUpsert) SetName(v string) *DemoUpsert {
	u.Set(demo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DemoUpsert) UpdateName() *DemoUpsert {
	u.SetExcluded(demo.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DemoUpsert) ClearName() *DemoUpsert {
	u.SetNull(demo.FieldName)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *DemoUpsert) SetCreateTime(v time.Time) *DemoUpsert {
	u.Set(demo.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *DemoUpsert) UpdateCreateTime() *DemoUpsert {
	u.SetExcluded(demo.FieldCreateTime)
	return u
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *DemoUpsert) ClearCreateTime() *DemoUpsert {
	u.SetNull(demo.FieldCreateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Demo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(demo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DemoUpsertOne) UpdateNewValues() *DemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(demo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Demo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DemoUpsertOne) Ignore() *DemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DemoUpsertOne) DoNothing() *DemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DemoCreate.OnConflict
// documentation for more info.
func (u *DemoUpsertOne) Update(set func(*DemoUpsert)) *DemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DemoUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DemoUpsertOne) SetName(v string) *DemoUpsertOne {
	return u.Update(func(s *DemoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DemoUpsertOne) UpdateName() *DemoUpsertOne {
	return u.Update(func(s *DemoUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DemoUpsertOne) ClearName() *DemoUpsertOne {
	return u.Update(func(s *DemoUpsert) {
		s.ClearName()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *DemoUpsertOne) SetCreateTime(v time.Time) *DemoUpsertOne {
	return u.Update(func(s *DemoUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *DemoUpsertOne) UpdateCreateTime() *DemoUpsertOne {
	return u.Update(func(s *DemoUpsert) {
		s.UpdateCreateTime()
	})
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *DemoUpsertOne) ClearCreateTime() *DemoUpsertOne {
	return u.Update(func(s *DemoUpsert) {
		s.ClearCreateTime()
	})
}

// Exec executes the query.
func (u *DemoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DemoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DemoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DemoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DemoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DemoCreateBulk is the builder for creating many Demo entities in bulk.
type DemoCreateBulk struct {
	config
	err      error
	builders []*DemoCreate
	conflict []sql.ConflictOption
}

// Save creates the Demo entities in the database.
func (dcb *DemoCreateBulk) Save(ctx context.Context) ([]*Demo, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Demo, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DemoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DemoCreateBulk) SaveX(ctx context.Context) []*Demo {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DemoCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DemoCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Demo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DemoUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dcb *DemoCreateBulk) OnConflict(opts ...sql.ConflictOption) *DemoUpsertBulk {
	dcb.conflict = opts
	return &DemoUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Demo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DemoCreateBulk) OnConflictColumns(columns ...string) *DemoUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DemoUpsertBulk{
		create: dcb,
	}
}

// DemoUpsertBulk is the builder for "upsert"-ing
// a bulk of Demo nodes.
type DemoUpsertBulk struct {
	create *DemoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Demo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(demo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DemoUpsertBulk) UpdateNewValues() *DemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(demo.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Demo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DemoUpsertBulk) Ignore() *DemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DemoUpsertBulk) DoNothing() *DemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DemoCreateBulk.OnConflict
// documentation for more info.
func (u *DemoUpsertBulk) Update(set func(*DemoUpsert)) *DemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DemoUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DemoUpsertBulk) SetName(v string) *DemoUpsertBulk {
	return u.Update(func(s *DemoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DemoUpsertBulk) UpdateName() *DemoUpsertBulk {
	return u.Update(func(s *DemoUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DemoUpsertBulk) ClearName() *DemoUpsertBulk {
	return u.Update(func(s *DemoUpsert) {
		s.ClearName()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *DemoUpsertBulk) SetCreateTime(v time.Time) *DemoUpsertBulk {
	return u.Update(func(s *DemoUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *DemoUpsertBulk) UpdateCreateTime() *DemoUpsertBulk {
	return u.Update(func(s *DemoUpsert) {
		s.UpdateCreateTime()
	})
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *DemoUpsertBulk) ClearCreateTime() *DemoUpsertBulk {
	return u.Update(func(s *DemoUpsert) {
		s.ClearCreateTime()
	})
}

// Exec executes the query.
func (u *DemoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DemoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DemoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DemoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
