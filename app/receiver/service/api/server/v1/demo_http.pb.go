// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.12.4
// source: server/v1/demo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDemoDemoCreateName = "/server.v1.demo/DemoCreateName"
const OperationDemoDemoMessage = "/server.v1.demo/DemoMessage"
const OperationDemoDemoSearchName = "/server.v1.demo/DemoSearchName"

type DemoHTTPServer interface {
	// DemoCreateName Sends a greeting
	DemoCreateName(context.Context, *DemoCreateNameRequest) (*DemoCreateNameResponse, error)
	DemoMessage(context.Context, *DemoMessageRequest) (*DemoMessageResponse, error)
	DemoSearchName(context.Context, *DemoSearchNameRequest) (*DemoSearchNameResponse, error)
}

func RegisterDemoHTTPServer(s *http.Server, srv DemoHTTPServer) {
	r := s.Route("/")
	r.POST("/demo_create_name", _Demo_DemoCreateName0_HTTP_Handler(srv))
	r.POST("/demo_search_name", _Demo_DemoSearchName0_HTTP_Handler(srv))
	r.POST("/demo_push", _Demo_DemoMessage0_HTTP_Handler(srv))
}

func _Demo_DemoCreateName0_HTTP_Handler(srv DemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DemoCreateNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoDemoCreateName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DemoCreateName(ctx, req.(*DemoCreateNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DemoCreateNameResponse)
		return ctx.Result(200, reply)
	}
}

func _Demo_DemoSearchName0_HTTP_Handler(srv DemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DemoSearchNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoDemoSearchName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DemoSearchName(ctx, req.(*DemoSearchNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DemoSearchNameResponse)
		return ctx.Result(200, reply)
	}
}

func _Demo_DemoMessage0_HTTP_Handler(srv DemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DemoMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoDemoMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DemoMessage(ctx, req.(*DemoMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DemoMessageResponse)
		return ctx.Result(200, reply)
	}
}

type DemoHTTPClient interface {
	DemoCreateName(ctx context.Context, req *DemoCreateNameRequest, opts ...http.CallOption) (rsp *DemoCreateNameResponse, err error)
	DemoMessage(ctx context.Context, req *DemoMessageRequest, opts ...http.CallOption) (rsp *DemoMessageResponse, err error)
	DemoSearchName(ctx context.Context, req *DemoSearchNameRequest, opts ...http.CallOption) (rsp *DemoSearchNameResponse, err error)
}

type DemoHTTPClientImpl struct {
	cc *http.Client
}

func NewDemoHTTPClient(client *http.Client) DemoHTTPClient {
	return &DemoHTTPClientImpl{client}
}

func (c *DemoHTTPClientImpl) DemoCreateName(ctx context.Context, in *DemoCreateNameRequest, opts ...http.CallOption) (*DemoCreateNameResponse, error) {
	var out DemoCreateNameResponse
	pattern := "/demo_create_name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDemoDemoCreateName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DemoHTTPClientImpl) DemoMessage(ctx context.Context, in *DemoMessageRequest, opts ...http.CallOption) (*DemoMessageResponse, error) {
	var out DemoMessageResponse
	pattern := "/demo_push"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDemoDemoMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DemoHTTPClientImpl) DemoSearchName(ctx context.Context, in *DemoSearchNameRequest, opts ...http.CallOption) (*DemoSearchNameResponse, error) {
	var out DemoSearchNameResponse
	pattern := "/demo_search_name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDemoDemoSearchName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
