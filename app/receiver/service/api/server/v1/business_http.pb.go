// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.12.4
// source: server/v1/business.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBusinessCreateAPP = "/server.v1.Business/CreateAPP"
const OperationBusinessCreateClient = "/server.v1.Business/CreateClient"
const OperationBusinessGetAPP = "/server.v1.Business/GetAPP"
const OperationBusinessGetClient = "/server.v1.Business/GetClient"
const OperationBusinessGetClientList = "/server.v1.Business/GetClientList"

type BusinessHTTPServer interface {
	CreateAPP(context.Context, *CreateAPPRequest) (*CreateAPPResponse, error)
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	GetAPP(context.Context, *GetAPPRequest) (*GetAPPResponse, error)
	GetClient(context.Context, *GetClientRequest) (*GetClientResponse, error)
	GetClientList(context.Context, *GetClientListRequest) (*GetClientListResponse, error)
}

func RegisterBusinessHTTPServer(s *http.Server, srv BusinessHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/business/create_app", _Business_CreateAPP0_HTTP_Handler(srv))
	r.POST("/v1/business/get_app", _Business_GetAPP0_HTTP_Handler(srv))
	r.POST("/v1/business/create_client", _Business_CreateClient0_HTTP_Handler(srv))
	r.POST("/v1/business/get_client", _Business_GetClient0_HTTP_Handler(srv))
	r.POST("/v1/business/get_client_list", _Business_GetClientList0_HTTP_Handler(srv))
}

func _Business_CreateAPP0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAPPRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessCreateAPP)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAPP(ctx, req.(*CreateAPPRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAPPResponse)
		return ctx.Result(200, reply)
	}
}

func _Business_GetAPP0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAPPRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessGetAPP)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAPP(ctx, req.(*GetAPPRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAPPResponse)
		return ctx.Result(200, reply)
	}
}

func _Business_CreateClient0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateClientRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessCreateClient)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateClient(ctx, req.(*CreateClientRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateClientResponse)
		return ctx.Result(200, reply)
	}
}

func _Business_GetClient0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClientRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessGetClient)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClient(ctx, req.(*GetClientRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClientResponse)
		return ctx.Result(200, reply)
	}
}

func _Business_GetClientList0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClientListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessGetClientList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClientList(ctx, req.(*GetClientListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClientListResponse)
		return ctx.Result(200, reply)
	}
}

type BusinessHTTPClient interface {
	CreateAPP(ctx context.Context, req *CreateAPPRequest, opts ...http.CallOption) (rsp *CreateAPPResponse, err error)
	CreateClient(ctx context.Context, req *CreateClientRequest, opts ...http.CallOption) (rsp *CreateClientResponse, err error)
	GetAPP(ctx context.Context, req *GetAPPRequest, opts ...http.CallOption) (rsp *GetAPPResponse, err error)
	GetClient(ctx context.Context, req *GetClientRequest, opts ...http.CallOption) (rsp *GetClientResponse, err error)
	GetClientList(ctx context.Context, req *GetClientListRequest, opts ...http.CallOption) (rsp *GetClientListResponse, err error)
}

type BusinessHTTPClientImpl struct {
	cc *http.Client
}

func NewBusinessHTTPClient(client *http.Client) BusinessHTTPClient {
	return &BusinessHTTPClientImpl{client}
}

func (c *BusinessHTTPClientImpl) CreateAPP(ctx context.Context, in *CreateAPPRequest, opts ...http.CallOption) (*CreateAPPResponse, error) {
	var out CreateAPPResponse
	pattern := "/v1/business/create_app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessCreateAPP))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BusinessHTTPClientImpl) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...http.CallOption) (*CreateClientResponse, error) {
	var out CreateClientResponse
	pattern := "/v1/business/create_client"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessCreateClient))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BusinessHTTPClientImpl) GetAPP(ctx context.Context, in *GetAPPRequest, opts ...http.CallOption) (*GetAPPResponse, error) {
	var out GetAPPResponse
	pattern := "/v1/business/get_app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessGetAPP))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BusinessHTTPClientImpl) GetClient(ctx context.Context, in *GetClientRequest, opts ...http.CallOption) (*GetClientResponse, error) {
	var out GetClientResponse
	pattern := "/v1/business/get_client"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessGetClient))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BusinessHTTPClientImpl) GetClientList(ctx context.Context, in *GetClientListRequest, opts ...http.CallOption) (*GetClientListResponse, error) {
	var out GetClientListResponse
	pattern := "/v1/business/get_client_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessGetClientList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
