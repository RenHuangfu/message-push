// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"message-push/app/receiver/common/model/po/ent/businessapp"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BusinessApp is the model entity for the BusinessApp schema.
type BusinessApp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 应用名称
	Name string `json:"name,omitempty"`
	// 应用key
	AppKey string `json:"app_key,omitempty"`
	// 应用id
	AppID string `json:"app_id,omitempty"`
	// 应用类型
	AppType string `json:"app_type,omitempty"`
	// 是否删除
	IsDel int `json:"is_del,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessApp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businessapp.FieldID, businessapp.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case businessapp.FieldName, businessapp.FieldAppKey, businessapp.FieldAppID, businessapp.FieldAppType:
			values[i] = new(sql.NullString)
		case businessapp.FieldCreateTime, businessapp.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessApp fields.
func (ba *BusinessApp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businessapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case businessapp.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ba.Name = value.String
			}
		case businessapp.FieldAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_key", values[i])
			} else if value.Valid {
				ba.AppKey = value.String
			}
		case businessapp.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ba.AppID = value.String
			}
		case businessapp.FieldAppType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_type", values[i])
			} else if value.Valid {
				ba.AppType = value.String
			}
		case businessapp.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				ba.IsDel = int(value.Int64)
			}
		case businessapp.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ba.CreateTime = value.Time
			}
		case businessapp.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ba.UpdateTime = value.Time
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusinessApp.
// This includes values selected through modifiers, order, etc.
func (ba *BusinessApp) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// Update returns a builder for updating this BusinessApp.
// Note that you need to call BusinessApp.Unwrap() before calling this method if this BusinessApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BusinessApp) Update() *BusinessAppUpdateOne {
	return NewBusinessAppClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BusinessApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BusinessApp) Unwrap() *BusinessApp {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessApp is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BusinessApp) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessApp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("name=")
	builder.WriteString(ba.Name)
	builder.WriteString(", ")
	builder.WriteString("app_key=")
	builder.WriteString(ba.AppKey)
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(ba.AppID)
	builder.WriteString(", ")
	builder.WriteString("app_type=")
	builder.WriteString(ba.AppType)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", ba.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ba.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ba.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessApps is a parsable slice of BusinessApp.
type BusinessApps []*BusinessApp
