// Code generated by ent, DO NOT EDIT.

package message

import (
	"message-push/app/receiver/common/model/po/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAppID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// Delay applies equality check predicate on the "delay" field. It's identical to DelayEQ.
func Delay(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDelay, v))
}

// SendTime applies equality check predicate on the "send_time" field. It's identical to SendTimeEQ.
func SendTime(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendTime, v))
}

// SendCount applies equality check predicate on the "send_count" field. It's identical to SendCountEQ.
func SendCount(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendCount, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldStatus, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsDel, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdateTime, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldAppID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContent, v))
}

// DelayEQ applies the EQ predicate on the "delay" field.
func DelayEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDelay, v))
}

// DelayNEQ applies the NEQ predicate on the "delay" field.
func DelayNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDelay, v))
}

// DelayIn applies the In predicate on the "delay" field.
func DelayIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDelay, vs...))
}

// DelayNotIn applies the NotIn predicate on the "delay" field.
func DelayNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDelay, vs...))
}

// DelayGT applies the GT predicate on the "delay" field.
func DelayGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDelay, v))
}

// DelayGTE applies the GTE predicate on the "delay" field.
func DelayGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDelay, v))
}

// DelayLT applies the LT predicate on the "delay" field.
func DelayLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDelay, v))
}

// DelayLTE applies the LTE predicate on the "delay" field.
func DelayLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDelay, v))
}

// SendTimeEQ applies the EQ predicate on the "send_time" field.
func SendTimeEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendTime, v))
}

// SendTimeNEQ applies the NEQ predicate on the "send_time" field.
func SendTimeNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSendTime, v))
}

// SendTimeIn applies the In predicate on the "send_time" field.
func SendTimeIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSendTime, vs...))
}

// SendTimeNotIn applies the NotIn predicate on the "send_time" field.
func SendTimeNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSendTime, vs...))
}

// SendTimeGT applies the GT predicate on the "send_time" field.
func SendTimeGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSendTime, v))
}

// SendTimeGTE applies the GTE predicate on the "send_time" field.
func SendTimeGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSendTime, v))
}

// SendTimeLT applies the LT predicate on the "send_time" field.
func SendTimeLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSendTime, v))
}

// SendTimeLTE applies the LTE predicate on the "send_time" field.
func SendTimeLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSendTime, v))
}

// SendCountEQ applies the EQ predicate on the "send_count" field.
func SendCountEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendCount, v))
}

// SendCountNEQ applies the NEQ predicate on the "send_count" field.
func SendCountNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSendCount, v))
}

// SendCountIn applies the In predicate on the "send_count" field.
func SendCountIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSendCount, vs...))
}

// SendCountNotIn applies the NotIn predicate on the "send_count" field.
func SendCountNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSendCount, vs...))
}

// SendCountGT applies the GT predicate on the "send_count" field.
func SendCountGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSendCount, v))
}

// SendCountGTE applies the GTE predicate on the "send_count" field.
func SendCountGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSendCount, v))
}

// SendCountLT applies the LT predicate on the "send_count" field.
func SendCountLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSendCount, v))
}

// SendCountLTE applies the LTE predicate on the "send_count" field.
func SendCountLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSendCount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldStatus, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldIsDel, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
